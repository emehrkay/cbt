// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: train.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainClient is the client API for Train service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainClient interface {
	// auth
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// ticket management
	TicketDetails(ctx context.Context, in *TicketDetailsRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	BuyTicket(ctx context.Context, in *BuyTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	RemoveTicket(ctx context.Context, in *RemoveTicketRequest, opts ...grpc.CallOption) (*Empty, error)
	ChangeTicket(ctx context.Context, in *ChangeTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	// details
	TrainOpenSeats(ctx context.Context, in *TrainOpenSeatRequest, opts ...grpc.CallOption) (*TrainOpenSeatResponses, error)
	TrainDetails(ctx context.Context, in *TrainDetailsRequest, opts ...grpc.CallOption) (*TrainDetailsResponse, error)
}

type trainClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainClient(cc grpc.ClientConnInterface) TrainClient {
	return &trainClient{cc}
}

func (c *trainClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/train.Train/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainClient) TicketDetails(ctx context.Context, in *TicketDetailsRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, "/train.Train/TicketDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainClient) BuyTicket(ctx context.Context, in *BuyTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, "/train.Train/BuyTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainClient) RemoveTicket(ctx context.Context, in *RemoveTicketRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/train.Train/RemoveTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainClient) ChangeTicket(ctx context.Context, in *ChangeTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, "/train.Train/ChangeTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainClient) TrainOpenSeats(ctx context.Context, in *TrainOpenSeatRequest, opts ...grpc.CallOption) (*TrainOpenSeatResponses, error) {
	out := new(TrainOpenSeatResponses)
	err := c.cc.Invoke(ctx, "/train.Train/TrainOpenSeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainClient) TrainDetails(ctx context.Context, in *TrainDetailsRequest, opts ...grpc.CallOption) (*TrainDetailsResponse, error) {
	out := new(TrainDetailsResponse)
	err := c.cc.Invoke(ctx, "/train.Train/TrainDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainServer is the server API for Train service.
// All implementations must embed UnimplementedTrainServer
// for forward compatibility
type TrainServer interface {
	// auth
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// ticket management
	TicketDetails(context.Context, *TicketDetailsRequest) (*TicketResponse, error)
	BuyTicket(context.Context, *BuyTicketRequest) (*TicketResponse, error)
	RemoveTicket(context.Context, *RemoveTicketRequest) (*Empty, error)
	ChangeTicket(context.Context, *ChangeTicketRequest) (*TicketResponse, error)
	// details
	TrainOpenSeats(context.Context, *TrainOpenSeatRequest) (*TrainOpenSeatResponses, error)
	TrainDetails(context.Context, *TrainDetailsRequest) (*TrainDetailsResponse, error)
	mustEmbedUnimplementedTrainServer()
}

// UnimplementedTrainServer must be embedded to have forward compatible implementations.
type UnimplementedTrainServer struct {
}

func (UnimplementedTrainServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTrainServer) TicketDetails(context.Context, *TicketDetailsRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketDetails not implemented")
}
func (UnimplementedTrainServer) BuyTicket(context.Context, *BuyTicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyTicket not implemented")
}
func (UnimplementedTrainServer) RemoveTicket(context.Context, *RemoveTicketRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTicket not implemented")
}
func (UnimplementedTrainServer) ChangeTicket(context.Context, *ChangeTicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTicket not implemented")
}
func (UnimplementedTrainServer) TrainOpenSeats(context.Context, *TrainOpenSeatRequest) (*TrainOpenSeatResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainOpenSeats not implemented")
}
func (UnimplementedTrainServer) TrainDetails(context.Context, *TrainDetailsRequest) (*TrainDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainDetails not implemented")
}
func (UnimplementedTrainServer) mustEmbedUnimplementedTrainServer() {}

// UnsafeTrainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainServer will
// result in compilation errors.
type UnsafeTrainServer interface {
	mustEmbedUnimplementedTrainServer()
}

func RegisterTrainServer(s grpc.ServiceRegistrar, srv TrainServer) {
	s.RegisterService(&Train_ServiceDesc, srv)
}

func _Train_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/train.Train/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Train_TicketDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).TicketDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/train.Train/TicketDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).TicketDetails(ctx, req.(*TicketDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Train_BuyTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).BuyTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/train.Train/BuyTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).BuyTicket(ctx, req.(*BuyTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Train_RemoveTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).RemoveTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/train.Train/RemoveTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).RemoveTicket(ctx, req.(*RemoveTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Train_ChangeTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).ChangeTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/train.Train/ChangeTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).ChangeTicket(ctx, req.(*ChangeTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Train_TrainOpenSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainOpenSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).TrainOpenSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/train.Train/TrainOpenSeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).TrainOpenSeats(ctx, req.(*TrainOpenSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Train_TrainDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).TrainDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/train.Train/TrainDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).TrainDetails(ctx, req.(*TrainDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Train_ServiceDesc is the grpc.ServiceDesc for Train service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Train_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "train.Train",
	HandlerType: (*TrainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Train_Login_Handler,
		},
		{
			MethodName: "TicketDetails",
			Handler:    _Train_TicketDetails_Handler,
		},
		{
			MethodName: "BuyTicket",
			Handler:    _Train_BuyTicket_Handler,
		},
		{
			MethodName: "RemoveTicket",
			Handler:    _Train_RemoveTicket_Handler,
		},
		{
			MethodName: "ChangeTicket",
			Handler:    _Train_ChangeTicket_Handler,
		},
		{
			MethodName: "TrainOpenSeats",
			Handler:    _Train_TrainOpenSeats_Handler,
		},
		{
			MethodName: "TrainDetails",
			Handler:    _Train_TrainDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "train.proto",
}
